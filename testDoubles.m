function [ double_biomass_fluxes ] = testDoubles( model )
    %TESTDOUBLES Test all double mutants for viability in a synthetic
    %complete medium
    %
    % Input:
    %   model     A COBRA Toolbox-format yeast model. Currently supports:
    %              iFF708 - doi: 10.1101/gr.234503
    %              iND750 - doi: 10.1101/gr.2250904
    %              iIN800 - doi: 10.1186/1752-0509-2-71
    %              iMM904 - doi: 10.1186/1752-0509-3-37
    %              iMM904bz - doi: 10.1038/ng.846
    %              iAZ900 - doi: 10.1186/1752-0509-4-178
    %              Yeast 4 - doi: 10.1186/1752-0509-4-145
    %              Yeast 5 - doi:10.1186/1752-0509-6-55
    %              Yeast 6 - doi:10.1093/database/bat059
    %              iTO977 - doi:10.1186/1752-0509-7-36
   
    %% set medium 
    % REFERENCE: 
    % Kennedy CJ, Boyle PM, Waks Z, Silver PA. "Systems-Level Engineering of
    % Nonfermentative Metabolism in Yeast" Genetics (2009) 183:385-397. DOI:
    % 10.1534/genetics.109.105254

    switch lower(model.description)
        case {'iff708_valid_modified.xml'} 
            model = complete_iFF(model);

        case {'ind750.xml'}
            model = complete_iND(model);

        case {'iin800.xml'}
            model = complete_iIN(model);
        
        case {'imm904'}
            model = complete_iMM(model);

        case {'iaz900.xml'}
            model = complete_iAZ(model); 

        case {'yeast_4.05'}
            model = complete_Y4(model);

        case {'yeast_5.01_model.xml'}
            model = complete_Y5(model);

        case {'yeast_6.06_cobra'}
            model = complete_Y6(model);

        case {'ito977_cobra_compatible'}
            model = complete_iTO(model);

        case {'imm904_nadcorrected'}
            % like iMM, but default biomass def also requires iron
            model = complete_iMMbs(model);

        otherwise
            error('Sorry, this model is not currently supported.')
    end
   
    %% set tolerance for KO growth
    wt_sln = optimizeCbModel(model,[],'one');
    wt_biomass_flux = wt_sln.f;
    
    %% check single KOs
    grRatio = singleGeneDeletion(model);
    
    %% check double KOs
    
    candidate_singles = unique(model.genes);
    double_biomass_fluxes=[];
    candidate_doubles = nchoosek(candidate_singles, 2);
    
    h = waitbar(0,'Checking double knockouts ...');

    for i=1:length(candidate_doubles)
        if mod(i,100) == 0
            waitbar(i/length(candidate_doubles),h);
        end
        
        clear mex;
        
        [newmodel,hasEffect,~,deletedGenes] = deleteModelGenes(model,...
            candidate_doubles(i,:));
        
        flux=optimizeCbModel(newmodel,[],'one');   
        
        % NOTE: There's an error here - if one of the genes matches two
        % model genes (such as YCR024C and YCR024C-A), the grRatio isn't an
        % integer, it's a vector with entries for each match
    
        double_biomass_fluxes = [double_biomass_fluxes; ...
        candidate_doubles(i,:) ...
        grRatio(strmatch(candidate_doubles(i,1), model.genes)) ...
        grRatio(strmatch(candidate_doubles(i,2), model.genes)) ...
        flux.f/wt_biomass_flux];
        
        %sprintf('%12i\n', length(candidate_doubles)) % for troubleshooting
        %sprintf('%12i %12.4f\n', i, flux.f) % for troubleshooting
    end
    
    close(h);

    % the double_biomass_fluxes variable is now a 5-column cell array. The
    % first two columns are the genes screened, the next two columns are
    % the respective single gene grRatios for them, and the final column is
    % the predicted biomass flux of the double KO normalized to WT growth
    % rate.

    % save('iFF_double_KOs');

end

function model = complete_iFF(model)
    % change iFF model medium to the Kennedy synthetic complete medium
    % NOTE: iFF doesn't have exchange reactions for: 4-Aminobenzoate,
    % folate, nicotinate, pyridoxine, or water
    
    % start with a clean slate: set to unconstrained excretion, no uptake)

    uptake_rxn_ids = {'ZYMSTxtI';'XANxtI';'URIxtI';'UREAxtI';'URAxtI';...
        'THYxtI';'DTxtI';'THMxtI';'SLFxtI';'SUCxtI';'SUCCxtI';...
        'C180xtI';'SPRMxtI';'SORxtI';'NAxtI';'MMETxtI';'SAMxtI';...
        'RFLAVxtI';'PYRxtI';'KxtI';'PIMExtI';'PIxtI';'PEPTxtI';...
        'C160xtI';'O2xtI';'OGTxtI';'OPEPxtI';'NMNxtI';'NH3xtI';...
        'C140xtI';'MIxtI';'MTHNxtI';'MELIxtI';'MLTxtI';'MALxtI';...
        'VALxtI';'TYRxtI';'TRPxtI';'THRxtI';'SERxtI';'PROxtI';...
        'PHExtI';'ORNxtI';'METxtI';'LYSxtI';'LEUxtI';'ILExtI';'HISxtI';...
        'GLNxtI';'GLUxtI';'GLTxtI';'CYSxtI';'ASPxtI';'ASNxtI';'ARGxtI';...
        'ALAxtI';'INSxtI';'HYXNxtI';'GSNxtI';'GNxtI';'GLALxtI';...
        'GLYxtI';'GLxtI';'GLAMxtI';'GABAxtI';'FUMxtI';'FORxtI';'ETHxtI';...
        'ERGOxtI';'DTTPxtI';'RIBxtI';'RMNxtI';'MNTxtI';'DIPEPxtI';...
        'GA6PxtI';'GLACxtI';'FRUxtI';'DUxtI';'DINxtI';'DGxtI';'DCxtI';...
        'DAxtI';'ARABxtI';'CYTSxtI';'CYTDxtI';'CO2xtI';'CITxtI';...
        'CHOxtI';'BTxtI';'BMxtI';'FUCxtI';'MANxtI';'GLCxtI';'TRExtI';...
        'ATNxtI';'PAPxtI';'ADNxtI';'ADxtI';'ACxtI';'ACALxtI';'AONAxtI';...
        'DANNAxtI';'AKGxtI';'PNTOxtI';'LACxtI';};

    excretion_rxn_ids = {'ZYMSTxtO';'XANxtO';'URIxtO';'UREAxtO';...
        'URAxtO';'THYxtO';'DTxtO';'THMxtO';'SLFxtO';'SUCxtO';'SUCCxtO';...
        'C180xtO';'SPRMxtO';'SORxtO';'NAxtO';'MMETxtO';'SAMxtO';...
        'RFLAVxtO';'PYRxtO';'KxtO';'PIMExtO';'PIxtO';'PEPTxtO';...
        'C160xtO';'O2xtO';'OGTxtO';'OPEPxtO';'NMNxtO';'NH3xtO';...
        'C140xtO';'MIxtO';'MTHNxtO';'MELIxtO';'MLTxtO';'MALxtO';...
        'VALxtO';'TYRxtO';'TRPxtO';'THRxtO';'SERxtO';'PROxtO';...
        'PHExtO';'ORNxtO';'METxtO';'LYSxtO';'LEUxtO';'ILExtO';'HISxtO';...
        'GLNxtO';'GLUxtO';'GLTxtO';'CYSxtO';'ASPxtO';'ASNxtO';'ARGxtO';...
        'ALAxtO';'INSxtO';'HYXNxtO';'GSNxtO';'GNxtO';'GLALxtO';...
        'GLYxtO';'GLxtO';'GLAMxtO';'GABAxtO';'FUMxtO';'FORxtO';'ETHxtO';...
        'ERGOxtO';'DTTPxtO';'RIBxtO';'RMNxtO';'MNTxtO';'DIPEPxtO';...
        'GA6PxtO';'GLACxtO';'FRUxtO';'DUxtO';'DINxtO';'DGxtO';'DCxtO';...
        'DAxtO';'ARABxtO';'CYTSxtO';'CYTDxtO';'CO2xtO';'CITxtO';...
        'CHOxtO';'BTxtO';'FUCxtO';'MANxtO';'GLCxtO';'TRExtO';'ATNxtO';...
        'PAPxtO';'ADNxtO';'ADxtO';'ACxtO';'ACALxtO';'AONAxtO';...
        'DANNAxtO';'AKGxtO';'PNTOxtO';'LACxtO';'BMxtO';};

    uptake_rxn_indexes = findRxnIDs(model, uptake_rxn_ids);
    excretion_rxn_indexes = findRxnIDs(model, ...
        excretion_rxn_ids);

    model.lb(uptake_rxn_indexes) = 0;
    model.ub(uptake_rxn_indexes) = 0;
    model.lb(excretion_rxn_indexes) = 0;
    model.ub(excretion_rxn_indexes) = 1000;

    constrainedUptake = {'ADxtI';'ALAxtI';'ARGxtI';'ASNxtI';'ASPxtI';...
        'BTxtI';'CYSxtI';'ERGOxtI';'GLNxtI';'GLUxtI';'GLYxtI';...
        'C160xtI';'HISxtI';'ILExtI';'MIxtI';'LEUxtI';'LYSxtI';...
        'METxtI';'C180xtI';'PHExtI';'PNTOxtI';'PROxtI';'RFLAVxtI';...
        'SERxtI';'THMxtI';'THRxtI';'TRPxtI';'TYRxtI';'URAxtI';...
        'VALxtI';'ZYMSTxtI'};
    glucoseExchange = {'GLCxtI';};
    unconstrainedUptake = {'NH3xtI';'PIxtI';'SLFxtI';'NAxtI';'KxtI';...
        'CO2xtI';'O2xtI'};
    
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.ub(constrainedUptakeRxnIndexes) = 0.5;
    model.ub(glucoseExchangeIndex) = 20;
    model.ub(unconstrainedUptakeRxnIndexes) = 1000;
end

function model = complete_iND(model)
    % change iND model medium to the Kennedy synthetic complete medium
    % NOTE: iND doesn't have exchange reactions for: 4-Aminobenzoate,
    % folate, nicotinate, or pyridoxine.
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;
    
    constrainedUptake = {'EX_ade(e)';'EX_ala_L(e)';'EX_arg_L(e)';...
        'EX_asn_L(e)';'EX_asp_L(e)';'EX_btn(e)';'EX_cys_L(e)';...
        'EX_ergst(e)';'EX_gln_L(e)';'EX_glu_L(e)';'EX_gly(e)';...
        'EX_hdcea(e)';'EX_his_L(e)';'EX_ile_L(e)';'EX_inost(e)';...
        'EX_leu_L(e)';'EX_lys_L(e)';'EX_met_L(e)';'EX_ocdcea(e)';...
        'EX_ocdcya(e)';'EX_phe_L(e)';'EX_pnto_R(e)';'EX_pro_L(e)';...
        'EX_ribflv(e)';'EX_ser_L(e)';'EX_thm(e)';'EX_thr_L(e)';...
        'EX_trp_L(e)';'EX_tyr_L(e)';'EX_ura(e)';'EX_val_L(e)';...
        'EX_zymst(e)'};
    glucoseExchange = {'EX_glc(e)';};
    unconstrainedUptake = {'EX_h2o(e)';'EX_nh4(e)';'EX_pi(e)';...
        'EX_so4(e)';'EX_na1(e)';'EX_k(e)';'EX_co2(e)';'EX_o2(e)'};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_iIN(model)
    % change iIN model medium to the Kennedy synthetic complete medium
    % NOTE: iIN doesn't have exchange reactions for: 4-Aminobenzoate,
    % folate, nicotinate, or water
    
    % start with a clean slate: set to unconstrained excretion, no uptake)

    uptake_rxn_ids = {'44DIMZYMSTxtI';'ACALxtI';'ACxtI';'ADNxtI';...
        'ADxtI';'AKGxtI';'ALAVxtI';'ALAxtI';'AMGxtI';'AONAxtI';...
        'ARABxtI';'ARGxtI';'ASNxtI';'ASPxtI';'ATNxtI';'ATTxtI';...
        'BMxtI';'BTxtI';'C100xtI';'C120xtI';'C140xtI';'C141xtI';...
        'C160xtI';'C161xtI';'C180xtI';'C181xtI';'C24xtI';'C26xtI';...
        'CARxtI';'CHOxtI';'CITxtI';'CO2xtI';'CYSxtI';'CYTDxtI';...
        'CYTSxtI';'DANNAxtI';'DAxtI';'DCxtI';'DGxtI';'DINxtI';...
        'DIPEPxtI';'DTTPxtI';'DTxtI';'DUxtI';'EPISTxtI';...
        'ERG572224xtI';'ERG722xtI';'ERGOSTxtI';'ETHxtI';...
        'FCOSTxtI';'FORxtI';'FRUxtI';'FUCxtI';'FUMxtI';'GA6PxtI';...
        'GABAxtI';'GLACxtI';'GLALxtI';'GLAMxtI';'GLCxtI';'GLNxtI';...
        'GLTxtI';'GLUxtI';'GLxtI';'GLYxtI';'GNxtI';'GROPCxtI';...
        'GROPIxtI';'GSNxtI';'HEXTI';'HISxtI';'HYXNxtI';'ILExtI';...
        'INSxtI';'KxtI';'LACxtI';'LANOSTxtI';'LEUxtI';'LYSxtI';...
        'MALxtI';'MANxtI';'MELIxtI';'METxtI';'MIxtI';'MLTxtI';...
        'MMETxtI';'MNTxtI';'MTHNxtI';'NAGxtI';'NAxtI';'NH3xtI';...
        'NMNxtI';'O2xtI';'OGTxtI';'OPEPxtI';'ORNxtI';'PAPxtI';...
        'PEPTxtI';'PHExtI';'PIMExtI';'PIxtI';'PNTOxtI';'PROxtI';...
        'PTRSCxtI';'PYRxtI';'RFLAVxtI';'RIBxtI';'RMNxtI';'SAMxtI';...
        'SERxtI';'SLFxtI';'SORxtI';'SPRMDxtI';'SPRMxtI';'SUCCxtI';...
        'SUCxtI';'THMxtI';'THRxtI';'THYxtI';'TRExtI';'TRPxtI';...
        'TYRxtI';'URAxtI';'UREAxtI';'URIxtI';'VALxtI';'VB6xtI';...
        'XANxtI';'XTSINExtI';'XYLxtI';'ZYMSTxtI';};

    excretion_rxn_ids = {'44DIMZYMSTxtO';'ACALxtO';'ACxtO';...
        'ADNxtO';'ADxtO';'AKGxtO';'ALAVxtO';'ALAxtO';'AMGxtO';...
        'AONAxtO';'ARABxtO';'ARGxtO';'ASNxtO';'ASPxtO';'ATNxtO';...
        'ATTxtO';'BMxtO';'BTxtO';'C100xtO';'C120xtO';'C140xtO';...
        'C141xtO';'C160xtO';'C161xtO';'C180xtO';'C181xtO';...
        'C24xtO';'C26xtO';'CARxtO';'CHOxtO';'CITxtO';'CO2xtO';...
        'CYSxtO';'CYTDxtO';'CYTSxtO';'DANNAxtO';'DAxtO';'DCxtO';...
        'DGxtO';'DINxtO';'DIPEPxtO';'DTTPxtO';'DTxtO';'DUxtO';...
        'EPISTxtO';'ERG572224xtO';'ERG722xtO';'ERGOSTxtO';...
        'ETHxtO';'FCOSTxtO';'FORxtO';'FRUxtO';'FUCxtO';'FUMxtO';...
        'GA6PxtO';'GABAxtO';'GLACxtO';'GLALxtO';'GLAMxtO';...
        'GLCxtO';'GLNxtO';'GLTxtO';'GLUxtO';'GLxtO';'GLYxtO';...
        'GNxtO';'GROPCxtO';'GROPIxtO';'GSNxtO';'HEXTO';'HISxtO';...
        'HYXNxtO';'ILExtO';'INSxtO';'KxtO';'LACxtO';'LANOSTxtO';...
        'LEUxtO';'LYSxtO';'MALxtO';'MANxtO';'MELIxtO';'METxtO';...
        'MIxtO';'MLTxtO';'MMETxtO';'MNTxtO';'MTHNxtO';'NAGxtO';...
        'NAxtO';'NH3xtO';'NMNxtO';'O2xtO';'OGTxtO';'OPEPxtO';...
        'ORNxtO';'PAPxtO';'PEPTxtO';'PHExtO';'PIMExtO';'PIxtO';...
        'PNTOxtO';'PROxtO';'PTRSCxtO';'PYRxtO';'RFLAVxtO';...
        'RIBxtO';'RMNxtO';'SAMxtO';'SERxtO';'SLFxtO';'SORxtO';...
        'SPRMDxtO';'SPRMxtO';'SUCCxtO';'SUCxtO';'THMxtO';'THRxtO';...
        'THYxtO';'TRExtO';'TRPxtO';'TYRxtO';'URAxtO';'UREAxtO';...
        'URIxtO';'VALxtO';'VB6xtO';'XANxtO';'XTSINExtO';'XYLxtO';...
        'ZYMSTxtO';};

    uptake_rxn_indexes = findRxnIDs(model, uptake_rxn_ids);
    excretion_rxn_indexes = findRxnIDs(model, ...
        excretion_rxn_ids);

    model.lb(uptake_rxn_indexes) = 0;
    model.ub(uptake_rxn_indexes) = 0;
    model.lb(excretion_rxn_indexes) = 0;
    model.ub(excretion_rxn_indexes) = 1000;

    constrainedUptake = {'ADxtI';'ALAxtI';'ARGxtI';'ASNxtI';'ASPxtI';...
        'BTxtI';'CYSxtI';'ERGOSTxtI';'GLNxtI';'GLUxtI';'GLYxtI';...
        'C160xtI';'HISxtI';'ILExtI';'MIxtI';'LEUxtI';'LYSxtI';...
        'METxtI';'C180xtI';'PHExtI';'PNTOxtI';'PROxtI';'VB6xtI';...
        'RFLAVxtI';'SERxtI';'THMxtI';'THRxtI';'TRPxtI';'TYRxtI';...
        'URAxtI';'VALxtI';'ZYMSTxtI'};
    glucoseExchange = {'GLCxtI';};
    unconstrainedUptake = {'NH3xtI';'PIxtI';'SLFxtI';'NAxtI';'KxtI';...
        'CO2xtI';'O2xtI'};
    
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.ub(constrainedUptakeRxnIndexes) = 0.5;
    model.ub(glucoseExchangeIndex) = 20;
    model.ub(unconstrainedUptakeRxnIndexes) = 1000;
end

function model = complete_iMM(model)
    % change iMM model medium to the Kennedy synthetic complete medium
    % NOTE: iMM doesn't have exchange reactions for folate or pyridoxine.
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;

    constrainedUptake = {'EX_4abz(e)';'EX_ade(e)';'EX_ala-L(e)';...
       'EX_arg-L(e)';'EX_asn-L(e)';'EX_asp-L(e)';'EX_btn(e)';...
       'EX_cys-L(e)';'EX_ergst(e)';'EX_gln-L(e)';'EX_glu-L(e)';...
       'EX_gly(e)';'EX_hdcea(e)';'EX_his-L(e)';'EX_ile-L(e)';...
       'EX_inost(e)';'EX_leu-L(e)';'EX_lys-L(e)';'EX_met-L(e)';...
       'EX_nac(e)';'EX_ocdcea(e)';'EX_ocdcya(e)';'EX_phe-L(e)';...
       'EX_pnto-R(e)';'EX_pro-L(e)';'EX_ribflv(e)';'EX_ser-L(e)';...
       'EX_thm(e)';'EX_thr-L(e)';'EX_trp-L(e)';'EX_tyr-L(e)';...
       'EX_ura(e)';'EX_val-L(e)';'EX_zymst(e)'};
    glucoseExchange = {'EX_glc(e)';};
    unconstrainedUptake = {'EX_h2o(e)';'EX_nh4(e)';'EX_pi(e)';...
        'EX_so4(e)';'EX_na1(e)';'EX_k(e)';'EX_co2(e)';'EX_o2(e)'};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_iAZ(model)
    % change iMM model medium to the Kennedy synthetic complete medium
    % NOTE: iMM doesn't have exchange reactions for folate or pyridoxine.
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;

    constrainedUptake = {'EX_4abz(e)';'EX_ade(e)';'EX_ala_L(e)';...
       'EX_arg_L(e)';'EX_asn_L(e)';'EX_asp_L(e)';'EX_btn(e)';...
       'EX_cys_L(e)';'EX_ergst(e)';'EX_gln_L(e)';'EX_glu_L(e)';...
       'EX_gly(e)';'EX_hdcea(e)';'EX_his_L(e)';'EX_ile_L(e)';...
       'EX_inost(e)';'EX_leu_L(e)';'EX_lys_L(e)';'EX_met_L(e)';...
       'EX_nac(e)';'EX_ocdcea(e)';'EX_ocdcya(e)';'EX_phe_L(e)';...
       'EX_pnto_R(e)';'EX_pro_L(e)';'EX_ribflv(e)';'EX_ser_L(e)';...
       'EX_thm(e)';'EX_thr_L(e)';'EX_trp_L(e)';'EX_tyr_L(e)';...
       'EX_ura(e)';'EX_val_L(e)';'EX_zymst(e)'};
    glucoseExchange = {'EX_glc(e)';};
    unconstrainedUptake = {'EX_h2o(e)';'EX_nh4(e)';'EX_pi(e)';...
        'EX_so4(e)';'EX_na1(e)';'EX_k(e)';'EX_co2(e)';'EX_o2(e)'};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_Y4(model)
    % change Y4 model medium to the Kennedy synthetic complete medium
    % NOTE: Y4 doesn't have exchange reactions for folate or water.
    
    % start with a clean slate (ie, unconstrained excretion, no uptake)
    % This one is hard b/c nonstandard exchange bounds, directions.
    exchangeRxns = findExcRxns(model);
    exchange_indexes=find(exchangeRxns);

    %thanks to Shuyi Ma (of the Price lab at ISB) for this!
    b2 = sum(model.S(:,exchange_indexes),1); %-1 for exchange as reactant +1 for exchange as product
    posexch = exchange_indexes(b2 == 1); % index of exchange rxns having product
    negexch = exchange_indexes(b2 == -1); % index of exchange rxns having substrate

    model.lb(posexch) = -1000;
    model.ub(posexch) = 0;

    model.lb(negexch) = 0;
    model.ub(negexch) = 1000;

    % now allow uptake of media components
    posConstrainedUptake = {'r_1143';'r_1347';'r_1350';'r_1352';...
        'r_1356';'r_1170';'r_1359';'r_1243';'r_1371';'r_1367';'r_1303';...
        'r_1324';'r_1373';'r_1378';'r_1335';'r_1384';'r_1386';'r_1388';...
        'r_1427';'r_1439';'r_1440';'r_1389';'r_1451';'r_1390';'r_1481';...
        'r_1488';'r_1393';'r_1512';'r_1396';'r_1397';'r_1401';'r_1527';...
        'r_1402';'r_1536';};
    
    negConstrainedUptake = {'r_1121';};
    
    glucoseExchange = {'r_1293';};
    
    posUnconstrainedUptake = {'r_1157';'r_1461';'r_1507';'r_1476';...
        'r_1194';'r_1435';};
    negUnconstrainedUptake = {'r_1497';};


    posConstrainedUptakeRxnIndexes = findRxnIDs(model,...
        posConstrainedUptake);
    negConstrainedUptakeRxnIndexes = findRxnIDs(model,...
        negConstrainedUptake);
    
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    
    posUnconstrainedUptakeRxnIndexes = findRxnIDs(model,...
        posUnconstrainedUptake);
    negUnconstrainedUptakeRxnIndexes = findRxnIDs(model,...
        negUnconstrainedUptake);
    
    model.ub(posConstrainedUptakeRxnIndexes) = 0.5;
    model.lb(negConstrainedUptakeRxnIndexes) = -0.5;

    model.ub(glucoseExchangeIndex) = 20;
    
    model.ub(posUnconstrainedUptakeRxnIndexes) = 1000;
    model.lb(negUnconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_Y5(model)
    % change Y5 model medium to the Kennedy synthetic complete medium
    % NOTE: Y5 doesn't have exchange reaction for folate.
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;

    constrainedUptake = {'r_1604';'r_1639';'r_1873';'r_1879';'r_1880';...
        'r_1881';'r_1671';'r_1883';'r_1757';'r_1891';'r_1889';'r_1810';...
        'r_1993';'r_1893';'r_1897';'r_1947';'r_1899';'r_1900';'r_1902';...
        'r_1967';'r_1918';'r_1918';'r_1903';'r_1548';'r_1904';'r_2028';...
        'r_2038';'r_1906';'r_2067';'r_1911';'r_1912';'r_1913';'r_2090';...
        'r_1914';'r_2106';};
    glucoseExchange = {'r_1714';};
    unconstrainedUptake = {'r_2100';'r_1654';'r_2005';'r_2060';'r_2049';...
        'r_2020';'r_1672';'r_1992';};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_Y6(model)
    % change Y6 model medium to the Kennedy synthetic complete medium
    % NOTE: Y6 doesn't have exchange reaction for folate or for potassium
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;

    constrainedUptake = {'r_1604';'r_1639';'r_1873';'r_1879';'r_1880';...
        'r_1881';'r_1671';'r_1883';'r_1757';'r_1891';'r_1889';'r_1810';...
        'r_1993';'r_1893';'r_1897';'r_1947';'r_1899';'r_1900';'r_1902';...
        'r_1967';'r_1918';'r_1918';'r_1903';'r_1548';'r_1904';'r_2028';...
        'r_2038';'r_1906';'r_2067';'r_1911';'r_1912';'r_1913';'r_2090';...
        'r_1914';'r_2106';};
    glucoseExchange = {'r_1714';};
    unconstrainedUptake = {'r_2100';'r_1654';'r_2005';'r_2060';'r_2049';...
        'r_1672';'r_1992';};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end

function model = complete_iTO(model)
    % change iTO model medium to the Kennedy synthetic complete medium
    % NOTE: iIN doesn't have exchange reactions for: 4-Aminobenzoate,
    % folate, nicotinate, or water
    
    % start with a clean slate: set to unconstrained excretion, no uptake)

    uptake_rxn_ids = {'2MBACxtI';'2MBALDxtI';'44DIMZYMSTxtI';'ACALxtI';...
        'ACxtI';'ADNxtI';'ADxtI';'AKGxtI';'ALAVxtI';'ALAxtI';'AMGxtI';...
        'AONAxtI';'ARABxtI';'ARGxtI';'ASNxtI';'ASPxtI';'ATNxtI';...
        'ATTxtI';'BMxtI';'BTxtI';'C100xtI';'C120xtI';'C140xtI';...
        'C141xtI';'C160xtI';'C161xtI';'C180xtI';'C181xtI';'C24xtI';...
        'C26xtI';'CARxtI';'CHOxtI';'CITxtI';'CO2xtI';'CYSxtI';...
        'CYTDxtI';'CYTSxtI';'DANNAxtI';'DAxtI';'DCxtI';'DGxtI';...
        'DINxtI';'DIPEPxtI';'DTTPxtI';'DTxtI';'DUxtI';'EPISTxtI';...
        'ERG572224xtI';'ERG722xtI';'ERGOSTxtI';'ETHAxtI';'ETHxtI';...
        'FCOSTxtI';'FORxtI';'FRUxtI';'FUCxtI';'FUMxtI';'GA6PxtI';...
        'GABAxtI';'GLACxtI';'GLALxtI';'GLAMxtI';'GLCxtI';'GLNxtI';...
        'GLTxtI';'GLUxtI';'GLxtI';'GLYxtI';'GNxtI';'GROPCxtI';...
        'GROPIxtI';'GSNxtI';'HISxtI';'HYXNxtI';'ILExtI';'INSxtI';...
        'KxtI';'LACxtI';'LANOSTxtI';'LEUxtI';'LYSxtI';'MALxtI';...
        'MANxtI';'MELIxtI';'METxtI';'MIxtI';'MLTxtI';'MMETxtI';...
        'MNTxtI';'MTHNxtI';'NAGxtI';'NAxtI';'NH3xtI';'NMNxtI';...
        'O2xtI';'OGTxtI';'OPEPxtI';'ORNxtI';'PAPxtI';'PEPTxtI';...
        'PHExtI';'PIMExtI';'PIxtI';'PNTOxtI';'PROxtI';'PTRSCxtI';...
        'PYRxtI';'RFLAVxtI';'RIBxtI';'RMNxtI';'SAMxtI';'SERxtI';...
        'SLFxtI';'SORxtI';'SPRMDxtI';'SPRMxtI';'SUCCxtI';'SUCxtI';...
        'THMxtI';'THRxtI';'THYxtI';'TRExtI';'TRPxtI';'TYRxtI';...
        'URAxtI';'UREAxtI';'URIxtI';'VALxtI';'VB6xtI';'XANxtI';...
        'XTSINExtI';'XYLxtI';'ZYMSTxtI';'DSERxtI'};

    excretion_rxn_ids = {'2MBACxtO';'44DIMZYMSTxtO';'ACALxtO';'ACxtO';...
        'ADNxtO';'ADxtO';'AKGxtO';'ALAVxtO';'ALAxtO';'AMGxtO';...
        'AONAxtO';'ARABxtO';'ARGxtO';'ASNxtO';'ASPxtO';'ATNxtO';...
        'ATTxtO';'BMxtO';'BTxtO';'C100xtO';'C120xtO';'C140xtO';...
        'C141xtO';'C160xtO';'C161xtO';'C180xtO';'C181xtO';'C24xtO';...
        'C26xtO';'CARxtO';'CHOxtO';'CITxtO';'CO2xtO';'CYSxtO';...
        'CYTDxtO';'CYTSxtO';'DANNAxtO';'DAxtO';'DCxtO';'DGxtO';...
        'DINxtO';'DIPEPxtO';'DTTPxtO';'DTxtO';'DUxtO';'EPISTxtO';...
        'ERG572224xtO';'ERG722xtO';'ERGOSTxtO';'ETHxtO';'FCOSTxtO';...
        'FORxtO';'FRUxtO';'FUCxtO';'FUMxtO';'GA6PxtO';'GABAxtO';...
        'GLACxtO';'GLALxtO';'GLAMxtO';'GLCxtO';'GLNxtO';'GLTxtO';...
        'GLUxtO';'GLxtO';'GLYxtO';'GNxtO';'GROPCxtO';'GROPIxtO';...
        'GSNxtO';'HISxtO';'HYXNxtO';'ILExtO';'INSxtO';'KxtO';'LACxtO';...
        'LANOSTxtO';'LEUxtO';'LYSxtO';'MALxtO';'MANxtO';'MELIxtO';...
        'METxtO';'MIxtO';'MLTxtO';'MMETxtO';'MNTxtO';'MTHNxtO';...
        'NAGxtO';'NAxtO';'NH3xtO';'NMNxtO';'O2xtO';'OGTxtO';'OPEPxtO';...
        'ORNxtO';'PAPxtO';'PEPTxtO';'PHExtO';'PIMExtO';'PIxtO';...
        'PNTOxtO';'PROxtO';'PTRSCxtO';'PYRxtO';'RFLAVxtO';'RIBxtO';...
        'RMNxtO';'SAMxtO';'SERxtO';'SLFxtO';'SORxtO';'SPRMDxtO';...
        'SPRMxtO';'SUCCxtO';'SUCxtO';'THMxtO';'THRxtO';'THYxtO';...
        'TRExtO';'TRPxtO';'TYRxtO';'URAxtO';'UREAxtO';'URIxtO';...
        'VALxtO';'VB6xtO';'XANxtO';'XTSINExtO';'XYLxtO';'ZYMSTxtO';...
        'DSERxtO'};

    uptake_rxn_indexes = findRxnIDs(model, uptake_rxn_ids);
    excretion_rxn_indexes = findRxnIDs(model, ...
        excretion_rxn_ids);

    model.lb(uptake_rxn_indexes) = 0;
    model.ub(uptake_rxn_indexes) = 0;
    model.lb(excretion_rxn_indexes) = 0;
    model.ub(excretion_rxn_indexes) = 1000;

    constrainedUptake = {'ADxtI';'ALAxtI';'ARGxtI';'ASNxtI';'ASPxtI';...
        'BTxtI';'CYSxtI';'ERGOSTxtI';'GLNxtI';'GLUxtI';'GLYxtI';...
        'C160xtI';'HISxtI';'ILExtI';'MIxtI';'LEUxtI';'LYSxtI';...
        'METxtI';'C180xtI';'PHExtI';'PNTOxtI';'PROxtI';'VB6xtI';...
        'RFLAVxtI';'SERxtI';'THMxtI';'THRxtI';'TRPxtI';'TYRxtI';...
        'URAxtI';'VALxtI';'ZYMSTxtI'};
    glucoseExchange = {'GLCxtI';};
    unconstrainedUptake = {'NH3xtI';'PIxtI';'SLFxtI';'NAxtI';'KxtI';...
        'CO2xtI';'O2xtI'};
    
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.ub(constrainedUptakeRxnIndexes) = 0.5;
    model.ub(glucoseExchangeIndex) = 20;
    model.ub(unconstrainedUptakeRxnIndexes) = 1000;
end

function model = complete_iMMbs(model)
    % change iMMbs model medium to the Kennedy synthetic complete medium
    % NOTE: iMMbs doesn't have exchange reactions for folate or pyridoxine,
    % and requires iron for growth (because it's included in the model
    % biomass definition).
    
    % start with a clean slate: set all exchange reactions to upper bound =
    % 1000 and lower bound = 0 (ie, unconstrained excretion, no uptake)
    exchangeRxns = findExcRxns(model);
    model.lb(exchangeRxns) = 0;
    model.ub(exchangeRxns) = 1000;

    constrainedUptake = {'EX_4abz(e)';'EX_ade(e)';'EX_ala_L(e)';...
       'EX_arg_L(e)';'EX_asn_L(e)';'EX_asp_L(e)';'EX_btn(e)';...
       'EX_cys_L(e)';'EX_ergst(e)';'EX_gln_L(e)';'EX_glu_L(e)';...
       'EX_gly(e)';'EX_hdcea(e)';'EX_his_L(e)';'EX_ile_L(e)';...
       'EX_inost(e)';'EX_leu_L(e)';'EX_lys_L(e)';'EX_met_L(e)';...
       'EX_nac(e)';'EX_ocdcea(e)';'EX_ocdcya(e)';'EX_phe_L(e)';...
       'EX_pnto_R(e)';'EX_pro_L(e)';'EX_ribflv(e)';'EX_ser_L(e)';...
       'EX_thm(e)';'EX_thr_L(e)';'EX_trp_L(e)';'EX_tyr_L(e)';...
       'EX_ura(e)';'EX_val_L(e)';'EX_zymst(e)'};
    glucoseExchange = {'EX_glc(e)';};
    unconstrainedUptake = {'EX_h2o(e)';'EX_nh4(e)';'EX_pi(e)';...
        'EX_so4(e)';'EX_na1(e)';'EX_k(e)';'EX_co2(e)';'EX_o2(e)';...
        'EX_fe2(e)'};
 
    constrainedUptakeRxnIndexes = findRxnIDs(model,constrainedUptake);
    glucoseExchangeIndex = findRxnIDs(model,glucoseExchange);
    unconstrainedUptakeRxnIndexes = findRxnIDs(model,unconstrainedUptake);
    model.lb(constrainedUptakeRxnIndexes) = -0.5;
    model.lb(glucoseExchangeIndex) = -20;
    model.lb(unconstrainedUptakeRxnIndexes) = -1000;
end
